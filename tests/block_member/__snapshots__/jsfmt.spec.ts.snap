// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Format apex: BlockMember.cls: BlockMember.cls 1`] = `
class BlockMember {
  String fieldMemberOne;
  String anotherFieldMember = 'Hello';
  private transient String anotherFieldMemberTwo;
  static string anotherFieldMemberThree;

  String propertyMemberWithGetSet { get; set; }
  String propertyMemberWithGet { get {} }
  String propertyMemberWithSet { set {} }

  public String propertyMemberWithGetPrivateSet {
    get {
      return 1;
    }
    private set;
  }
  String propertyMemberWithOnlySet {
    set {
      memberThree = value;
    }
  }
  private String privatePropertyMemberWithOnlyGet {
    get {
      return 2;
    }
  }

  void method() {
    System.debug('method');
  }

  class StatementBlockMember {
    {
      System.debug('Statement Block Member');
    }
  }
  class StaticStatementBlockMember {
    static {
      System.debug('Static Statement Block Member');
    }
  }
  interface InnerInterface {
    void interfaceMethod();
  }
  enum TestEnum { ONE, TWO }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class BlockMember {
  String fieldMemberOne;
  String anotherFieldMember = 'Hello';
  private transient String anotherFieldMemberTwo;
  static string anotherFieldMemberThree;

  String propertyMemberWithGetSet { get; set; }
  String propertyMemberWithGet {
    get {
    }
  }
  String propertyMemberWithSet {
    set {
    }
  }

  public String propertyMemberWithGetPrivateSet {
    get {
      return 1;
    }
    private set;
  }
  String propertyMemberWithOnlySet {
    set {
      memberThree = value;
    }
  }
  private String privatePropertyMemberWithOnlyGet {
    get {
      return 2;
    }
  }

  void method() {
    System.debug('method');
  }

  class StatementBlockMember {
    {
      System.debug('Statement Block Member');
    }
  }
  class StaticStatementBlockMember {
    static {
      System.debug('Static Statement Block Member');
    }
  }
  interface InnerInterface {
    void interfaceMethod();
  }
  enum TestEnum {
    ONE,
    TWO
  }
}

`;
